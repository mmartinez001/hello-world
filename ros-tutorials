***********************************************************************************
USE THIS REFERENCE GUIDE WITH ROS TUTORIAL "WRITING A SIMPLE PUBLISHER AND SUBSCRIBER"
***********************************************************************************
WRITING THE PUBLISHER NODE

#!/usr/bin/env python        %makes sure your script is executed as a python script
import rospy                %you need to import rospy if you are writing a ROS Node
from std_msgs.msg import String         %we can usethe string message type



***********************************************************************
This section of code defines the talker's interface to the rest of ROS.
"pub.....(queue_size=10)" declares that your node is publishing to the chatter 
topic using the message type string. queue size does not have to be included since it 
can slow down and limit the amount of queued messages, so it can be omitted. 

pub = rospy.Publisher('chatter', String, queue_size=10)

rospy.init_node(NAME) is very important as it tells rospy the name of your node.
It cannot start communicating with the ROS MASTER.

rospy.init_node('talker', anonymous=True)

*******************************************************************************

rate = rospy.Rate(10)       %loops information at desired rate (EG. 10 iteratrions / second

while not rospy.is_shutdown():              %checks if there are any exit commands of the code
    hello_str = "Hello world %s" % rospy.get_time()     %saves string to variable
    rospy.loginfo(hello_str)        %messages get printed to screen. Nodes log file and ros out
    pub.publish(hello_str)          %publishes to chatter topic
    rate.sleep()                    %sleeps just long enough to maintain the desigred rate through the loop
    
    
msg = String()                      %pass in no arguments and initialize fields directly
msg.data = str                      %msg.data is the holder of the message type stinge


if __name__ == '__main__':                    %standard PYTHON main check
      try: 
        talker()
      except rospy.ROSInterruptException:       %in case ctrl-C or your node is shutdown, this will provide an exception
        pass
***********************************************************************************
***********************************************************************************
WRITING THE SUBSCRIBER NODE

rospy.init_node('listener',anonymous=True)          %initializes node, and generates a unique name for the node so that you can have multiple listerner.oy nodes run easily
rospy.Subscriber("chatter", String, callback)       %Your node subscribes to chatter topicwhen new messages are received, callback is invoked witht he message as the first argument

rospy.spin()                                        %keeps your node from exiting until the node has been shutdown.


********************************************************************************
Final Step is to BUILD YOUR NODES!
ROS uses CMake as our build system and you have to use it even for python nodes.
This is to make sure that the autogenerated Python code for messages and services is created.



